#!/usr/bin/env python
"""
Script principal para inicializa√ß√£o completa do sistema Doj√¥ Uemura
Executa todos os scripts de configura√ß√£o na ordem correta
"""
import os
import sys
import subprocess
import time

def executar_script(script_path, descricao):
    """Executa um script Python e exibe o resultado"""
    print(f"\n{'='*60}")
    print(f"üöÄ EXECUTANDO: {descricao}")
    print(f"üìÅ Script: {script_path}")
    print(f"{'='*60}")
    
    try:
        # Executar o script
        resultado = subprocess.run([sys.executable, script_path], 
                                 capture_output=True, text=True, cwd=os.getcwd())
        
        # Exibir sa√≠da
        if resultado.stdout:
            print("‚úÖ SA√çDA:")
            print(resultado.stdout)
        
        if resultado.stderr:
            print("‚ö†Ô∏è AVISOS:")
            print(resultado.stderr)
        
        if resultado.returncode == 0:
            print(f"‚úÖ {descricao} executado com sucesso!")
            return True
        else:
            print(f"‚ùå Erro ao executar {descricao}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao executar {script_path}: {e}")
        return False

def verificar_ambiente():
    """Verifica se o ambiente est√° configurado corretamente"""
    print("üîç Verificando ambiente...")
    
    # Verificar se est√° no diret√≥rio correto
    if not os.path.exists('manage.py'):
        print("‚ùå ERRO: Execute este script do diret√≥rio raiz do projeto!")
        print("   Diret√≥rio atual:", os.getcwd())
        print("   Procure por: manage.py")
        return False
    
    # Verificar se o ambiente virtual est√° ativo
    if not hasattr(sys, 'real_prefix') and not (hasattr(sys, 'base_prefix') and sys.base_prefix != sys.prefix):
        print("‚ö†Ô∏è AVISO: Ambiente virtual n√£o detectado!")
        print("   Recomendado: ativar com 'venv\\Scripts\\activate'")
        resposta = input("   Continuar mesmo assim? (s/N): ").lower()
        if resposta != 's':
            return False
    
    print("‚úÖ Ambiente verificado!")
    return True

def main():
    """Fun√ß√£o principal de inicializa√ß√£o"""
    print("üèãÔ∏è INICIALIZA√á√ÉO DO SISTEMA DOJ√î UEMURA")
    print("=" * 60)
    
    # Verificar ambiente
    if not verificar_ambiente():
        return
    
    # Lista de scripts para executar (em ordem)
    scripts = [
        ('setup_empresa.py', 'Configura√ß√£o da Empresa'),
        ('setup_modalidades.py', 'Configura√ß√£o das Modalidades'),
        ('setup_termos_condicoes.py', 'Configura√ß√£o dos Termos e Condi√ß√µes'),
        ('testar_empresa.py', 'Teste da Configura√ß√£o')
    ]
    
    print(f"\nüìã Executando {len(scripts)} scripts de inicializa√ß√£o...")
    
    # Executar cada script
    sucessos = 0
    for script, descricao in scripts:
        if executar_script(script, descricao):
            sucessos += 1
        else:
            print(f"‚ùå Falha em: {descricao}")
            resposta = input("   Continuar com os pr√≥ximos scripts? (s/N): ").lower()
            if resposta != 's':
                break
        
        # Pausa entre scripts
        if script != scripts[-1][0]:  # Se n√£o for o √∫ltimo
            print("\n‚è≥ Aguardando 2 segundos...")
            time.sleep(2)
    
    # Resumo final
    print(f"\n{'='*60}")
    print("üìä RESUMO DA INICIALIZA√á√ÉO")
    print(f"{'='*60}")
    print(f"‚úÖ Scripts executados com sucesso: {sucessos}/{len(scripts)}")
    
    if sucessos == len(scripts):
        print("üéâ SISTEMA INICIALIZADO COM SUCESSO!")
        print("\nüìù Pr√≥ximos passos:")
        print("   1. Acesse /admin/ para configurar usu√°rios")
        print("   2. Adicione imagens √†s modalidades")
        print("   3. Teste o sistema completo")
    else:
        print("‚ö†Ô∏è ALGUNS SCRIPTS FALHARAM!")
        print("   Verifique os erros acima e execute novamente")
    
    print(f"\nüèãÔ∏è Doj√¥ Uemura - Sistema de Gest√£o")
    print("=" * 60)

if __name__ == '__main__':
    main()
