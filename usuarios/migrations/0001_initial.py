# Generated by Django 5.2.4 on 2025-08-17 20:57

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import utils.validacoes
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Modalidade',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=50, unique=True, verbose_name='Nome da Modalidade')),
                ('descricao', models.TextField(blank=True, verbose_name='Descrição')),
                ('ativa', models.BooleanField(default=True, verbose_name='Modalidade Ativa')),
                ('ordem', models.PositiveIntegerField(default=0, verbose_name='Ordem de Exibição')),
            ],
            options={
                'verbose_name': 'Modalidade',
                'verbose_name_plural': 'Modalidades',
                'ordering': ['ordem', 'nome'],
            },
        ),
        migrations.CreateModel(
            name='StatusMatricula',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=50, unique=True, verbose_name='Nome do Status')),
                ('descricao', models.TextField(blank=True, verbose_name='Descrição')),
                ('cor', models.CharField(default='#007bff', help_text='Código hexadecimal da cor (ex: #007bff)', max_length=7, verbose_name='Cor do Status')),
                ('ativo', models.BooleanField(default=True, verbose_name='Status Ativo')),
                ('ordem', models.PositiveIntegerField(default=0, verbose_name='Ordem de Exibição')),
            ],
            options={
                'verbose_name': 'Status de Matrícula',
                'verbose_name_plural': 'Status de Matrícula',
                'ordering': ['ordem', 'nome'],
            },
        ),
        migrations.CreateModel(
            name='TipoMatricula',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=50, unique=True, verbose_name='Nome do Tipo')),
                ('descricao', models.TextField(blank=True, verbose_name='Descrição')),
                ('gratuito', models.BooleanField(default=False, verbose_name='Matrícula Gratuita')),
                ('taxa_inscricao', models.DecimalField(decimal_places=2, default=0.0, max_digits=8, verbose_name='Taxa de Inscrição')),
                ('ativo', models.BooleanField(default=True, verbose_name='Tipo Ativo')),
                ('ordem', models.PositiveIntegerField(default=0, verbose_name='Ordem de Exibição')),
            ],
            options={
                'verbose_name': 'Tipo de Matrícula',
                'verbose_name_plural': 'Tipos de Matrícula',
                'ordering': ['ordem', 'nome'],
            },
        ),
        migrations.CreateModel(
            name='Usuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email')),
                ('email_verificado', models.BooleanField(default=False, help_text='Indica se o email foi verificado pelo usuário', verbose_name='Email Verificado')),
                ('cpf', models.CharField(blank=True, max_length=14, null=True, unique=True, validators=[utils.validacoes.validar_cpf], verbose_name='CPF')),
                ('data_nascimento', models.DateField(blank=True, null=True, validators=[utils.validacoes.validar_idade_usuario], verbose_name='Data de Nascimento')),
                ('telefone', models.CharField(blank=True, max_length=15, null=True, validators=[django.core.validators.RegexValidator(message='Telefone deve estar no formato (XX) XXXXX-XXXX', regex='^\\(\\d{2}\\)\\s\\d{4,5}-\\d{4}$')], verbose_name='Telefone')),
                ('tipo_conta', models.CharField(choices=[('RESPONSAVEL', 'Responsável'), ('PROFESSOR', 'Professor'), ('GESTOR', 'Gestor'), ('FUNCIONARIO', 'Funcionário')], default='RESPONSAVEL', max_length=20, verbose_name='Tipo de Conta')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Usuário',
                'verbose_name_plural': 'Usuários',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Dependente',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('codigo_alfanumerico', models.CharField(editable=False, max_length=9, unique=True)),
                ('nome', models.CharField(max_length=200, verbose_name='Nome Completo do Dependente')),
                ('data_nascimento', models.DateField(validators=[utils.validacoes.validar_idade_dependente], verbose_name='Data de Nascimento')),
                ('cpf', models.CharField(max_length=14, unique=True, validators=[utils.validacoes.validar_cpf], verbose_name='CPF')),
                ('parentesco', models.CharField(choices=[('filho', 'Filho(a)'), ('enteado', 'Enteado(a)'), ('neto', 'Neto(a)'), ('sobrinho', 'Sobrinho(a)'), ('outro', 'Outro')], max_length=20, verbose_name='Parentesco')),
                ('foto', models.ImageField(help_text='Foto do dependente (opcional)', upload_to='dependentes/fotos/', verbose_name='Foto')),
                ('cep', models.CharField(max_length=9, validators=[django.core.validators.RegexValidator(message='CEP deve estar no formato XXXXX-XXX', regex='^\\d{5}-\\d{3}$')], verbose_name='CEP')),
                ('logradouro', models.CharField(max_length=200, verbose_name='Logradouro')),
                ('numero', models.CharField(max_length=10, verbose_name='Número')),
                ('complemento', models.CharField(blank=True, max_length=100, verbose_name='Complemento')),
                ('bairro', models.CharField(max_length=100, verbose_name='Bairro')),
                ('cidade', models.CharField(max_length=100, verbose_name='Cidade')),
                ('uf', models.CharField(max_length=2, validators=[django.core.validators.RegexValidator(message='UF deve ter 2 letras maiúsculas', regex='^[A-Z]{2}$')], verbose_name='UF')),
                ('escolaridade', models.CharField(choices=[('fundamental_1', 'Ensino Fundamental I (1º ao 5º ano)'), ('fundamental_2', 'Ensino Fundamental II (6º ao 9º ano)'), ('medio', 'Ensino Médio'), ('tecnico', 'Ensino Técnico')], max_length=20, verbose_name='Escolaridade')),
                ('escola', models.CharField(max_length=200, verbose_name='Escola')),
                ('turno', models.CharField(choices=[('matutino', 'Matutino'), ('vespertino', 'Vespertino'), ('noturno', 'Noturno'), ('integral', 'Integral')], max_length=15, verbose_name='Turno')),
                ('condicoes_medicas', models.TextField(blank=True, help_text='Descreva qualquer condição médica relevante para a prática de esportes', verbose_name='Condições Médicas para Prática de Esportes')),
                ('termo_responsabilidade', models.BooleanField(default=False, verbose_name='Aceito os Termos de Responsabilidade')),
                ('termo_uso_imagem', models.BooleanField(default=False, verbose_name='Autorizo o Uso de Imagem')),
                ('data_matricula', models.DateField(default=datetime.date.today, verbose_name='Data da Matrícula')),
                ('data_cadastro', models.DateTimeField(auto_now_add=True, verbose_name='Data de Cadastro')),
                ('data_atualizacao', models.DateTimeField(auto_now=True, verbose_name='Última Atualização')),
                ('usuario', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='dependentes', to=settings.AUTH_USER_MODEL, verbose_name='Usuário Responsável')),
                ('modalidade', models.ForeignKey(blank=True, help_text='Modalidade escolhida (apenas para matrícula paga)', null=True, on_delete=django.db.models.deletion.PROTECT, to='usuarios.modalidade', verbose_name='Modalidade')),
                ('status_matricula', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='usuarios.statusmatricula', verbose_name='Status da Matrícula')),
                ('tipo_matricula', models.ForeignKey(help_text='Projeto Social (gratuito) ou Modalidade Paga', on_delete=django.db.models.deletion.PROTECT, to='usuarios.tipomatricula', verbose_name='Tipo de Matrícula')),
            ],
            options={
                'verbose_name': 'Dependente',
                'verbose_name_plural': 'Dependentes',
                'ordering': ['usuario__first_name', 'data_nascimento'],
                'constraints': [models.UniqueConstraint(fields=('usuario', 'cpf'), name='unique_dependente_por_usuario')],
            },
        ),
    ]
